"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-simple-animate";
exports.ids = ["vendor-chunks/react-simple-animate"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-simple-animate/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-simple-animate/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar React__namespace = /*#__PURE__*/_interopNamespace(React);\n\nconst DEFAULT_DURATION = 0.3;\r\nconst DEFAULT_EASE_TYPE = 'linear';\r\nconst DEFAULT_DIRECTION = 'normal';\r\nconst DEFAULT_FILLMODE = 'none';\r\nconst RUNNING = 'running';\r\nconst PAUSED = 'paused';\r\nconst ALL = 'all';\n\nvar calculateTotalDuration = ({ duration = DEFAULT_DURATION, delay = 0, overlay = 0, }) => duration + delay - overlay || 0;\n\nvar isUndefined = (val) => val === undefined;\n\nfunction getSequenceId(sequenceIndex, sequenceId, defaultValue) {\r\n    if (isUndefined(sequenceId) && isUndefined(sequenceIndex)) {\r\n        return defaultValue || 0;\r\n    }\r\n    if (sequenceIndex && sequenceIndex >= 0) {\r\n        return sequenceIndex;\r\n    }\r\n    if (sequenceId) {\r\n        return sequenceId;\r\n    }\r\n    return 0;\r\n}\n\nconst AnimateContext = React__namespace.createContext({\r\n    animationStates: {},\r\n    register: () => { },\r\n});\r\nfunction AnimateGroup({ play, sequences = [], children, }) {\r\n    const [animationStates, setAnimationStates] = React__namespace.useState({});\r\n    const animationsRef = React__namespace.useRef({});\r\n    const register = React__namespace.useCallback((data) => {\r\n        const { sequenceIndex, sequenceId } = data;\r\n        if (!isUndefined(sequenceId) || !isUndefined(sequenceIndex)) {\r\n            animationsRef.current[getSequenceId(sequenceIndex, sequenceId)] = data;\r\n        }\r\n    }, []);\r\n    React__namespace.useEffect(() => {\r\n        const sequencesToAnimate = Array.isArray(sequences) && sequences.length\r\n            ? sequences\r\n            : Object.values(animationsRef.current);\r\n        const localAnimationState = {};\r\n        (play ? sequencesToAnimate : [...sequencesToAnimate].reverse()).reduce((previous, { sequenceId, sequenceIndex, duration = DEFAULT_DURATION, delay, overlay, }, currentIndex) => {\r\n            const id = getSequenceId(sequenceIndex, sequenceId, currentIndex);\r\n            const currentTotalDuration = calculateTotalDuration({\r\n                duration,\r\n                delay,\r\n                overlay,\r\n            });\r\n            const totalDuration = currentTotalDuration + previous;\r\n            localAnimationState[id] = {\r\n                play,\r\n                pause: !play,\r\n                delay: (delay || 0) + previous,\r\n                controlled: true,\r\n            };\r\n            return totalDuration;\r\n        }, 0);\r\n        setAnimationStates(localAnimationState);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [play]);\r\n    return (React__namespace.createElement(AnimateContext.Provider, { value: { animationStates, register } }, children));\r\n}\n\nvar secToMs = (ms) => (ms || 0) * 1000;\n\nfunction Animate(props) {\r\n    const { play, children, render, start, end, complete = '', onComplete, delay = 0, duration = DEFAULT_DURATION, easeType = DEFAULT_EASE_TYPE, sequenceId, sequenceIndex, } = props;\r\n    const onCompleteTimeRef = React__namespace.useRef();\r\n    const [style, setStyle] = React__namespace.useState(start || {});\r\n    const { register, animationStates = {} } = React__namespace.useContext(AnimateContext);\r\n    const id = getSequenceId(sequenceIndex, sequenceId);\r\n    React__namespace.useEffect(() => {\r\n        if ((!isUndefined(sequenceIndex) && sequenceIndex >= 0) || sequenceId) {\r\n            register(props);\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    React__namespace.useEffect(() => {\r\n        const animationState = animationStates[id] || {};\r\n        setStyle({\r\n            ...(play || animationState.play ? end : start),\r\n            transition: `${ALL} ${duration}s ${easeType} ${animationState.delay || delay}s`,\r\n        });\r\n        if (play && (complete || onComplete)) {\r\n            onCompleteTimeRef.current = setTimeout(() => {\r\n                complete && setStyle(complete);\r\n                onComplete && onComplete();\r\n            }, secToMs((animationState.delay || delay) + duration));\r\n        }\r\n        return () => onCompleteTimeRef.current && clearTimeout(onCompleteTimeRef.current);\r\n    }, [\r\n        id,\r\n        animationStates,\r\n        play,\r\n        duration,\r\n        easeType,\r\n        delay,\r\n        onComplete,\r\n        start,\r\n        end,\r\n        complete,\r\n    ]);\r\n    return render ? render({ style }) : React__namespace.createElement(\"div\", { style: style }, children);\r\n}\n\nvar camelCaseToDash = (camelCase) => camelCase ? camelCase.replace(/[A-Z]/g, c => `-${c.toLowerCase()}`) : '';\n\nconst generateKeyframes = (keyframes) => {\r\n    const animationLength = keyframes.length;\r\n    return keyframes.reduce((previous, keyframe, currentIndex) => {\r\n        const keyframePercentage = parseFloat((100 / (animationLength - 1)).toFixed(2)) * currentIndex;\r\n        if (typeof keyframe === 'string') {\r\n            return `${previous} ${keyframePercentage}% {${keyframe}}`;\r\n        }\r\n        const keys = Object.keys(keyframe);\r\n        if (keys.length && isNaN(+keys[0])) {\r\n            const keyframeContent = keys.reduce((acc, key) => `${acc} ${camelCaseToDash(key)}: ${keyframe[key]};`, '');\r\n            return `${previous} ${keyframePercentage}% {${keyframeContent}}`;\r\n        }\r\n        return `${previous} ${keys[0]}% {${keyframe[keys[0]]}}`;\r\n    }, '');\r\n};\r\nfunction createStyle({ keyframes, animationName, }) {\r\n    return `@keyframes ${animationName} {${generateKeyframes(keyframes)}}`;\r\n}\n\nfunction createTag({ keyframes, animationName, }) {\r\n    var _a, _b, _c, _d;\r\n    let styleTag = document.querySelector('style[data-id=rsi]');\r\n    if (!styleTag) {\r\n        styleTag = document.createElement('style');\r\n        styleTag.setAttribute('data-id', 'rsi');\r\n        document.head.appendChild(styleTag);\r\n    }\r\n    const index = (_c = (_b = (_a = styleTag.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;\r\n    try {\r\n        (_d = styleTag.sheet) === null || _d === void 0 ? void 0 : _d.insertRule(createStyle({\r\n            keyframes,\r\n            animationName,\r\n        }), index);\r\n    }\r\n    catch (e) {\r\n        console.error('react simple animate, error found during insert style ', e); // eslint-disable-line no-console\r\n    }\r\n    return {\r\n        styleTag,\r\n        index,\r\n    };\r\n}\n\nvar deleteRules = (sheet, deleteName) => {\r\n    if (!sheet) {\r\n        return;\r\n    }\r\n    const index = Object.values(sheet.cssRules).findIndex(({ name }) => name === deleteName);\r\n    if (index >= 0) {\r\n        sheet.deleteRule(index);\r\n    }\r\n};\n\nvar createRandomName = () => `RSI-${Math.random()\r\n    .toString(36)\r\n    .substr(2, 9)}`;\n\nvar getPlayState = (pause) => (pause ? PAUSED : RUNNING);\n\nfunction AnimateKeyframes(props) {\r\n    const { children, play = false, pause = false, render, duration = DEFAULT_DURATION, delay = 0, easeType = DEFAULT_EASE_TYPE, direction = DEFAULT_DIRECTION, fillMode = DEFAULT_FILLMODE, iterationCount = 1, sequenceIndex, keyframes, sequenceId, } = props;\r\n    let pauseValue;\r\n    const animationNameRef = React__namespace.useRef({\r\n        forward: '',\r\n        reverse: '',\r\n    });\r\n    const controlled = React__namespace.useRef(false);\r\n    const styleTagRef = React__namespace.useRef({\r\n        forward: null,\r\n        reverse: null,\r\n    });\r\n    const id = getSequenceId(sequenceIndex, sequenceId);\r\n    const { register, animationStates = {} } = React__namespace.useContext(AnimateContext);\r\n    const animateState = animationStates[id] || {};\r\n    const [, forceUpdate] = React__namespace.useState(false);\r\n    React__namespace.useEffect(() => {\r\n        const styleTag = styleTagRef.current;\r\n        const animationName = animationNameRef.current;\r\n        animationNameRef.current.forward = createRandomName();\r\n        let result = createTag({\r\n            animationName: animationNameRef.current.forward,\r\n            keyframes,\r\n        });\r\n        styleTagRef.current.forward = result.styleTag;\r\n        animationNameRef.current.reverse = createRandomName();\r\n        result = createTag({\r\n            animationName: animationNameRef.current.reverse,\r\n            keyframes: keyframes.reverse(),\r\n        });\r\n        styleTagRef.current.reverse = result.styleTag;\r\n        register(props);\r\n        if (play) {\r\n            forceUpdate(true);\r\n        }\r\n        return () => {\r\n            var _a, _b;\r\n            deleteRules((_a = styleTag.forward) === null || _a === void 0 ? void 0 : _a.sheet, animationName.forward);\r\n            deleteRules((_b = styleTag.reverse) === null || _b === void 0 ? void 0 : _b.sheet, animationName.reverse);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    if (animateState.controlled && !controlled.current) {\r\n        pauseValue = animateState.pause;\r\n        if (!animateState.pause) {\r\n            controlled.current = true;\r\n        }\r\n    }\r\n    else {\r\n        pauseValue = pause;\r\n    }\r\n    const style = {\r\n        animation: `${duration}s ${easeType} ${animateState.delay || delay}s ${iterationCount} ${direction} ${fillMode} ${getPlayState(pauseValue)} ${((animateState.controlled ? animateState.play : play)\r\n            ? animationNameRef.current.forward\r\n            : animationNameRef.current.reverse) || ''}`,\r\n    };\r\n    return render ? render({ style }) : React__namespace.createElement(\"div\", { style: style || {} }, children);\r\n}\n\nfunction useAnimate(props) {\r\n    const { start, end, complete, onComplete, delay = 0, duration = DEFAULT_DURATION, easeType = DEFAULT_EASE_TYPE, } = props;\r\n    const transition = React__namespace.useMemo(() => `${ALL} ${duration}s ${easeType} ${delay}s`, [duration, easeType, delay]);\r\n    const [animate, setAnimate] = React__namespace.useState({\r\n        isPlaying: false,\r\n        style: { ...start, transition },\r\n    });\r\n    const { isPlaying, style } = animate;\r\n    const onCompleteTimeRef = React__namespace.useRef();\r\n    React__namespace.useEffect(() => {\r\n        if ((onComplete || complete) && isPlaying) {\r\n            onCompleteTimeRef.current = setTimeout(() => {\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n                if (complete) {\r\n                    setAnimate((animate) => ({\r\n                        ...animate,\r\n                        style: complete,\r\n                    }));\r\n                }\r\n            }, secToMs(delay + duration));\r\n        }\r\n        return () => onCompleteTimeRef.current && clearTimeout(onCompleteTimeRef.current);\r\n    }, [animate, complete, delay, duration, isPlaying, onComplete]);\r\n    return {\r\n        isPlaying,\r\n        style,\r\n        play: React__namespace.useCallback((isPlaying) => {\r\n            setAnimate((animate) => ({\r\n                ...animate,\r\n                style: {\r\n                    ...(isPlaying ? end : start),\r\n                    transition,\r\n                },\r\n                isPlaying,\r\n            }));\r\n        }, [end, start, transition]),\r\n    };\r\n}\n\nfunction useAnimateKeyframes(props) {\r\n    const { duration = DEFAULT_DURATION, delay = 0, easeType = DEFAULT_EASE_TYPE, direction = DEFAULT_DIRECTION, fillMode = DEFAULT_FILLMODE, iterationCount = 1, keyframes, } = props;\r\n    const animationNameRef = React__namespace.useRef({\r\n        forward: '',\r\n        reverse: '',\r\n    });\r\n    const styleTagRef = React__namespace.useRef({\r\n        forward: null,\r\n        reverse: null,\r\n    });\r\n    const { register } = React__namespace.useContext(AnimateContext);\r\n    const [isPlaying, setIsPlaying] = React__namespace.useState(null);\r\n    const [isPaused, setIsPaused] = React__namespace.useState(false);\r\n    React__namespace.useEffect(() => {\r\n        const styleTag = styleTagRef.current;\r\n        const animationName = animationNameRef.current;\r\n        animationNameRef.current.forward = createRandomName();\r\n        let result = createTag({\r\n            animationName: animationNameRef.current.forward,\r\n            keyframes,\r\n        });\r\n        styleTagRef.current.forward = result.styleTag;\r\n        animationNameRef.current.reverse = createRandomName();\r\n        result = createTag({\r\n            animationName: animationNameRef.current.reverse,\r\n            keyframes: keyframes.reverse(),\r\n        });\r\n        styleTagRef.current.reverse = result.styleTag;\r\n        register(props);\r\n        return () => {\r\n            var _a, _b;\r\n            deleteRules((_a = styleTag.forward) === null || _a === void 0 ? void 0 : _a.sheet, animationName.forward);\r\n            deleteRules((_b = styleTag.reverse) === null || _b === void 0 ? void 0 : _b.sheet, animationName.reverse);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    const style = {\r\n        animation: `${duration}s ${easeType} ${delay}s ${iterationCount} ${direction} ${fillMode} ${getPlayState(isPaused)} ${isPlaying === null\r\n            ? ''\r\n            : isPlaying\r\n                ? animationNameRef.current.forward\r\n                : animationNameRef.current.reverse}`,\r\n    };\r\n    return {\r\n        style,\r\n        play: setIsPlaying,\r\n        pause: setIsPaused,\r\n        isPlaying: !!isPlaying,\r\n    };\r\n}\n\nfunction createArrayWithNumbers(length) {\r\n    return Array.from({ length }, () => null);\r\n}\n\nfunction useAnimateGroup(props) {\r\n    const { sequences = [] } = props;\r\n    const defaultArray = createArrayWithNumbers(sequences.length).map((_, index) => props.sequences[index].start);\r\n    const [styles, setStyles] = React__namespace.useState(defaultArray);\r\n    const [isPlaying, setPlaying] = React__namespace.useState(false);\r\n    const animationNamesRef = React__namespace.useRef([]);\r\n    const styleTagRef = React__namespace.useRef([]);\r\n    React__namespace.useEffect(() => {\r\n        sequences.forEach(({ keyframes }, i) => {\r\n            if (!Array.isArray(keyframes)) {\r\n                return;\r\n            }\r\n            if (!animationNamesRef.current[i]) {\r\n                animationNamesRef.current[i] = {};\r\n                styleTagRef.current[i] = {};\r\n            }\r\n            animationNamesRef.current[i].forward = createRandomName();\r\n            let result = createTag({\r\n                animationName: animationNamesRef.current[i].forward,\r\n                keyframes,\r\n            });\r\n            styleTagRef.current[i].forward = result.styleTag;\r\n            animationNamesRef.current[i].reverse = createRandomName();\r\n            result = createTag({\r\n                animationName: animationNamesRef.current[i].reverse,\r\n                keyframes: keyframes.reverse(),\r\n            });\r\n            styleTagRef.current[i].reverse = result.styleTag;\r\n        });\r\n        const styleTags = styleTagRef.current;\r\n        const animationNames = animationNamesRef.current;\r\n        return () => Object.values(animationNames).forEach(({ forward, reverse }, i) => {\r\n            var _a, _b;\r\n            deleteRules((_a = styleTags[i].forward) === null || _a === void 0 ? void 0 : _a.sheet, forward);\r\n            deleteRules((_b = styleTags[i].reverse) === null || _b === void 0 ? void 0 : _b.sheet, reverse);\r\n        });\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    const play = React__namespace.useCallback((isPlay) => {\r\n        let totalDuration = 0;\r\n        const animationRefWithOrder = isPlay\r\n            ? animationNamesRef.current\r\n            : [...animationNamesRef.current].reverse();\r\n        const styles = (isPlay ? sequences : [...sequences].reverse()).map((current, currentIndex) => {\r\n            const { duration = DEFAULT_DURATION, delay = 0, overlay, keyframes, iterationCount = 1, easeType = DEFAULT_EASE_TYPE, direction = DEFAULT_DIRECTION, fillMode = DEFAULT_FILLMODE, end = {}, start = {}, } = current;\r\n            const delayDuration = currentIndex === 0 ? delay : totalDuration;\r\n            const transition = `${ALL} ${duration}s ${easeType} ${delayDuration}s`;\r\n            totalDuration =\r\n                calculateTotalDuration({ duration, delay, overlay }) + totalDuration;\r\n            return keyframes\r\n                ? {\r\n                    animation: `${duration}s ${easeType} ${delayDuration}s ${iterationCount} ${direction} ${fillMode} ${RUNNING} ${isPlay\r\n                        ? animationRefWithOrder[currentIndex].forward\r\n                        : animationRefWithOrder[currentIndex].reverse}`,\r\n                }\r\n                : {\r\n                    ...(isPlay ? end : start),\r\n                    transition,\r\n                };\r\n        });\r\n        setStyles(isPlay ? styles : [...styles].reverse());\r\n        setPlaying(isPlay);\r\n    }, []);\r\n    return { styles, play, isPlaying };\r\n}\n\nexports.Animate = Animate;\nexports.AnimateGroup = AnimateGroup;\nexports.AnimateKeyframes = AnimateKeyframes;\nexports.useAnimate = useAnimate;\nexports.useAnimateGroup = useAnimateGroup;\nexports.useAnimateKeyframes = useAnimateKeyframes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-simple-animate/dist/index.js\n");

/***/ })

};
;